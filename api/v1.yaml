openapi: 3.0.0
info:
  version: 0.1.0
  title: Dyte Rest API
servers:
  - url: "https://api.cluster.dyte.in/v1/"
    description: Production server
paths:
  "/organizations/{organizationId}/stats":
    summary: Get stats
    description: Get all stats
    get:
      summary: Get all stats
      tags:
        - Stats
      description: >
        Get stats for the current organization like total minutes, total sessions and
        stats for each session
      operationId: getOrgStats
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: startTime
          in: query
          description: Get stats for rooms that were created only between startTime and endTime
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: Get stats for rooms that were created only between startTime and endTime
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStatsResponseSchema"
              example: |
                {
                  "success": true,
                  "totalMinutes": 0,
                  "totalSessions": 1,
                  "totalRecordingMinutes": 0,
                  "dayStats": [{
                    "day": "2021-03-21T00:00:00.000Z",
                    "totalMinutes": 0,
                    "totalSessions": 1,
                    "totalRecordingMinutes": 0
                  }]
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/meetings/{meetingId}/analytics":
    summary: Get meeting analytics
    description: Get analytics (peer events) for a meeting
    get:
      summary: Get analytics (peer events) for a meeting
      tags:
        - Stats
      description: >
        Get analytics for a meeting, i.e, the list of peer events (joining and leaving), grouped by client specific IDs of each peer
      operationId: getMeetingAnalytics
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID of meeting
          required: true
          schema:
            type: string
            format: uuid
        - name: startTime
          in: query
          description: Get peer events only between startTime and endTime
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: Get peer events only between startTime and endTime
          schema:
            type: string
            format: date-time
        - name: clientSpecificId
          in: query
          description: Get peer events only for client with the specified clientSpecificId
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStatsResponseSchema"
              example: |
                {
                  "success": true,
                  "analytics": {
                      "client-1": {
                          "events": [
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-17T17:20:59.182Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-17T17:27:03.570Z",
                                  "details": {
                                      "minutesConsumed": 6.073133333333334
                                  }
                              }
                          ],
                          "totalMinutes": 6.073133333333334
                      },
                      "client-2": {
                          "events": [
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-17T17:25:54.568Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-17T17:26:22.618Z",
                                  "details": {
                                      "minutesConsumed": 0.4675
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-17T17:26:39.846Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-17T17:26:52.150Z",
                                  "details": {
                                      "minutesConsumed": 0.20506666666666667
                                  }
                              }
                          ],
                          "totalMinutes": 0.6725666666666668
                      },
                      "c1": {
                          "events": [
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:18:05.335Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:20:30.892Z",
                                  "details": {
                                      "minutesConsumed": 2.42595
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:20:31.943Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:21:30.834Z",
                                  "details": {
                                      "minutesConsumed": 0.9815166666666667
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:27:34.422Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:28:32.365Z",
                                  "details": {
                                      "minutesConsumed": 0.9657166666666667
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:28:37.354Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:30:08.796Z",
                                  "details": {
                                      "minutesConsumed": 1.5240333333333334
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:30:09.532Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:30:16.164Z",
                                  "details": {
                                      "minutesConsumed": 0.11053333333333333
                                  }
                              }
                          ],
                          "totalMinutes": 6.007750000000001
                      },
                      "c2": {
                          "events": [
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:18:47.614Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:20:30.973Z",
                                  "details": {
                                      "minutesConsumed": 1.72265
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:20:31.890Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:21:28.266Z",
                                  "details": {
                                      "minutesConsumed": 0.9396
                                  }
                              }
                          ],
                          "totalMinutes": 2.6622500000000002
                      }
                  }
                }
      security:
        - api_key: []
  "/organizations/{organizationId}/analytics":
    summary: Get Organization Peer analytics
    description: Get analytics (peer events) across all meetings in the current organization
    get:
      summary: Get analytics (peer events) across all meetings in the current organization
      tags:
        - Stats
      description: >
        Get analytics for all meetings in an org, i.e, the list of peer events (joining and leaving), grouped by client specific IDs of each peer
      operationId: getOrgAnalytics
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: startTime
          in: query
          description: Get peer events only between startTime and endTime
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: Get peer events only between startTime and endTime
          schema:
            type: string
            format: date-time
        - name: clientSpecificId
          in: query
          description: Get peer events only for client with the specified clientSpecificId
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStatsResponseSchema"
              example: |
                {
                  "success": true,
                  "analytics": {
                      "client-1": {
                          "events": [
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-17T17:20:59.182Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-17T17:27:03.570Z",
                                  "details": {
                                      "minutesConsumed": 6.073133333333334
                                  }
                              }
                          ],
                          "totalMinutes": 6.073133333333334
                      },
                      "client-2": {
                          "events": [
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-17T17:25:54.568Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-17T17:26:22.618Z",
                                  "details": {
                                      "minutesConsumed": 0.4675
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-17T17:26:39.846Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-17T17:26:52.150Z",
                                  "details": {
                                      "minutesConsumed": 0.20506666666666667
                                  }
                              }
                          ],
                          "totalMinutes": 0.6725666666666668
                      },
                      "c1": {
                          "events": [
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:18:05.335Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:20:30.892Z",
                                  "details": {
                                      "minutesConsumed": 2.42595
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:20:31.943Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:21:30.834Z",
                                  "details": {
                                      "minutesConsumed": 0.9815166666666667
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:27:34.422Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:28:32.365Z",
                                  "details": {
                                      "minutesConsumed": 0.9657166666666667
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:28:37.354Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:30:08.796Z",
                                  "details": {
                                      "minutesConsumed": 1.5240333333333334
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:30:09.532Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:30:16.164Z",
                                  "details": {
                                      "minutesConsumed": 0.11053333333333333
                                  }
                              }
                          ],
                          "totalMinutes": 6.007750000000001
                      },
                      "c2": {
                          "events": [
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:18:47.614Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:20:30.973Z",
                                  "details": {
                                      "minutesConsumed": 1.72265
                                  }
                              },
                              {
                                  "event": "PEER_JOINING",
                                  "time": "2021-08-24T05:20:31.890Z",
                                  "details": {}
                              },
                              {
                                  "event": "PEER_LEAVING",
                                  "time": "2021-08-24T05:21:28.266Z",
                                  "details": {
                                      "minutesConsumed": 0.9396
                                  }
                              }
                          ],
                          "totalMinutes": 2.6622500000000002
                      }
                  }
                }
      security:
        - api_key: []
  "/organizations/{organizationId}/recordings":
    summary: Get recording stats
    description: Get all recording stats
    get:
      summary: Get all recording stats
      tags:
        - Stats
      description: >
        Get recording stats for the current organization like roomName, status, start time and
        endtime
      operationId: getRecordingStats
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: startTime
          in: query
          description: Get recording stats for recordings that were started only between startTime and endTime
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: Get recording stats for recordings that were started only between startTime and endTime
          schema:
            type: string
            format: date-time
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordingStatsSchema"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "total": 1,
                    "recordingStats": [{
                      "status":"RECORDING",
                      "startedTime":"2021-03-23T21:57:59.608Z",
                      "stoppedTime":null,
                      "roomName":"onyx-produce"
                    }]
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/rooms":
    summary: Get Rooms
    description: Get all rooms
    get:
      summary: Get all rooms
      tags:
        - Stats
      description: |
        Get rooms for the current organization
      operationId: getOrgRooms
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: startTime
          in: query
          description: Get rooms that were created only between startTime and endTime
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: Get rooms that were created only between startTime and endTime
          schema:
            type: string
            format: date-time
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgRoomsResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "total": 10,
                    "rooms": [{
                        "id": "1c0a34cd-76cb-48b1-8be0-30afa2831565",
                        "roomUUID": "123e4567-e89b-12d3-a456-426614174000",
                        "roomURL": "brick-fibula",
                        "roomDisplayTitle": "An example meeting",
                        "createdBy": "Steve Jobs",
                        "maxUsers": 10,
                        "currentUsers": 3,
                        "minutesConsumed": 100,
                        "createdAt": "2021-01-11T15:58:29.266Z",
                        "updatedAt": "2021-01-11T15:59:29.266Z"
                      }]
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/meetings/{meetingId}/rooms":
    summary: Get meeting rooms
    description: Get all meeting rooms
    get:
      summary: Get all meeting rooms
      tags:
        - Stats
      description: |
        Get rooms for the current organization meeting
      operationId: getMeetingRooms
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID of meeting
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgMeetingRoomsResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "rooms": [{
                        "id": "1c0a34cd-76cb-48b1-8be0-30afa2831565",
                        "roomUUID": "123e4567-e89b-12d3-a456-426614174000",
                        "roomURL": "brick-fibula",
                        "roomDisplayTitle": "An example meeting",
                        "createdBy": "Steve Jobs",
                        "maxUsers": 10,
                        "currentUsers": 3,
                        "minutesConsumed": 100,
                        "createdAt": "2021-01-11T15:58:29.266Z",
                        "updatedAt": "2021-01-11T15:59:29.266Z"
                      }]
                  }
                }
        "400":
          description: Invalid Org ID or Meeting ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/users":
    summary: Organization Users
    description: Organization Users
    get:
      summary: Get all users
      tags:
        - Team Management
      description: |
        Get users for the current organization with their roles in it
      operationId: getAllOrgUsers
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsersResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "total": 2,
                    "users": [
                      {
                        "id": "1c0a34cd-76cb-48b1-8be0-30afa2831565",
                        "name": "Master",
                        "email": "dev@dyte.in",
                        "createdAt": "2021-01-11T15:58:29.266Z",
                        "role": "Owner"
                      },
                      {
                        "id": "b1633745-4077-47e2-951e-83614ca9a69b",
                        "name": "Kushagra Vaish",
                        "email": "client-id-2@Kyt-test.dyte.in",
                        "createdAt": "2021-01-11T17:40:11.311Z",
                        "role": "Client"
                      }
                    ]
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/user":
    summary: Give user access to the current organization
    post:
      summary: Give user access to the current organization
      description: |
        Give user access to the current organization as owner
      tags:
        - Team Management
      operationId: addOrgUser
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddOrgUserBody"
            example: |
              {
                "email": "dev@dyte.in",
                "role": "Owner"
              }
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {}
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/meeting":
    summary: Create meeting
    post:
      summary: Create meeting
      description: |
        Create a meeting for the current organization
      tags:
        - Meetings
      operationId: createMeeting
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMeetingRequestBody"
            example: |
              {
                "title": "Monday Sprint Planning",
                "authorization":{
                    "waitingRoom":true
                }
              }
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateMeetingResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "meeting": {
                      "id": "cddfd4a8-d6fb-4d15-be6b-269c6dedfa70",
                      "title": "Monday Sprint planning",
                      "roomName": "octagonal-trip",
                      "status": "LIVE",
                      "createdAt": "2021-01-11T17:38:30.697Z",
                      "participants": []
                    }
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/meetings":
    summary: Meetings
    get:
      summary: Get all meetings
      description: |
        Get meetings for that organization
      tags:
        - Meetings
      operationId: getAllMeetings
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: search
          schema:
            type: string
          description: Filters meeting with title or room name matching the search term
        - in: query
          name: startTime
          schema:
            type: string
            format: date-time
          description: Filters meeting with meeting created after startTime
        - in: query
          name: startTime
          schema:
            type: string
            format: date-time
          description: Filters meeting with meeting created before endTime
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMeetingsResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "total": 2,
                    "meetings": [
                      {
                        "id": "cddfd4a8-d6fb-4d15-be6b-269c6dedfa70",
                        "title": "new meeting",
                        "roomName": "octagonal-trip",
                        "status": "LIVE",
                        "createdAt": "2021-01-11T17:38:30.697Z"
                      },
                      {
                        "id": "de3c4102-6ff9-4ba7-b98a-53df934ee305",
                        "title": "new meeting",
                        "roomName": "nonstop-flight",
                        "status": "LIVE",
                        "createdAt": "2021-01-11T16:31:28.336Z"
                      }
                    ]
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/meetings/{meetingId}":
    summary: Get a meeting using meeting ID
    get:
      summary: Get a meeting using meeting ID
      description: |
        Get a specific meeting in the current organization
      tags:
        - Meetings
      operationId: getMeeting
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMeetingResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "meeting": {
                      "id": "cddfd4a8-d6fb-4d15-be6b-269c6dedfa70",
                      "title": "new meeting",
                      "roomName": "octagonal-trip",
                      "status": "LIVE",
                      "createdAt": "2021-01-11T17:38:30.697Z"
                    }
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
    put:
      summary: Update a meeting in the current organization
      description: |
        Updates a specific meeting in the current organization
      tags:
        - Meetings
      operationId: updateMeeting
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMeetingRequestBody"
            example: |
              {
                "title": "Tuesday Sprint Planning",
                "status": "CLOSED"
              }
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMeetingResponse"
              example: |
                {
                  "success": true,
                  "message": "meeting updated",
                  "data": {
                    "meeting": {
                      "id": "cddfd4a8-d6fb-4d15-be6b-269c6dedfa70",
                      "title": "Tuesday Sprint Planning",
                      "roomName": "octagonal-trip",
                      "status": "Closed",
                      "createdAt": "2021-01-11T17:38:30.697Z"
                    }
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/meetings/{meetingId}/participant":
    summary: Add a participant
    post:
      summary: Add a particpant
      description: |
        Add a particpant for a specific meeting
      tags:
        - Meetings
      operationId: addParticipant
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddParticipantBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddParticipantResponse"
              example: |
                {
                  "success":true,
                  "message":"",
                  "data": {
                    "authResponse": {
                      "userAdded": true,
                      "authToken": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImFmNjIzMjhiLTMxYjgtNDNkZi1iOTU4LTk2NzhlOTQ4ZWYwYSIsImxvZ2dlZEluIjp0cnVlLCJpYXQiOjE2MTAzMjA3OTgsImV4cCI6MTYxMDQwNzE5OH0.cQ9WsmDpKy4FRE7i7is4iDVH5ObphHq-C2CqBkomlFl9gGMACrbDs9J35uvrRk8Pv2CT-fqr1tVGrhcEDMKKWae-ugML1D-Cq64oRXqTb2Lk2RRQIGSWXFRe3264GOVL38l61XVltDSKh7cRTCuds-MfT1vCd9SYi-VDA328xVGWPPk22hM7MDvUnPmZaKv0ngEJjj0Z0TrBAaAXZKEnLtjTy06uut6Fi57qOdKr400U3pCCn55sGVDJusQsrqF4oBizRNMcrjeikGbDZghUMn_DiSIZ_Dk7JIXK6lGRqJKCrYwwe7WUJmjXEnFTdFIXYQLYODhQcvvy0P39vwPqBA"
                    }
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  ? "/organizations/{organizationId}/meetings/{meetingId}/participant/{participantId}"
  : summary: participant
    delete:
      summary: Delete a particpant
      description: |
        Delete a particpant for a specific meeting
      tags:
        - Meetings
      operationId: deleteParticipant
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
        - name: participantId
          in: path
          description: ID for the participant
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success":true,
                  "message":"participant deleted",
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/meetings/{meetingId}/participants":
    summary: Add a participant
    get:
      summary: Get All Participant
      description: |
        Get all particpants for a specific meeting
      tags:
        - Meetings
      operationId: getAllParticipants
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetParticipantsResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "total": 1,
                    "participants": [
                      {
                        "id": "b1633745-4077-47e2-951e-83614ca9a69b",
                        "name": "Kushagra Vaish",
                        "picture": null,
                        "email": "client-id-2@Kyt-test.dyte.in",
                        "createdAt": "2021-01-11T17:40:11.337Z"
                      }
                    ]
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/preset":
    summary: Add a preset
    post:
      summary: Add a preset
      description: |
        Add a preset for the current organization
      tags:
        - Presets
      operationId: addPreset
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePresetRequestBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "preset": {
                      "name": "preset_teacher",
                      "description": "Preset for teachers",
                      "s3URL": "https://dyte-uploads.s3.ap-south-1.amazonaws.com/b0021c1e-d96e-45ca-8c87-021921c69ca1/preset_teacher.json",
                      "organization": {
                        "id": "b0021c1e-d96e-45ca-8c87-021921c69ca1",
                        "name": "test",
                        "description": "Testing account"
                      },
                      "id": "3dfe526a-f7e1-446c-b462-0105513cd532"
                    }
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/presets":
    summary: Get all presets
    get:
      summary: Get all presets
      description: |
        Get all presets for the current organization
      tags:
        - Presets
      operationId: getAllPresets
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "total": 7,
                    "presets": [
                      {
                        "id": "3dfe526a-f7e1-446c-b462-0105513cd532",
                        "name": "preset_teacher",
                        "description": "Preset for teachers",
                        "s3URL": "https://dyte-uploads.s3.ap-south-1.amazonaws.com/b0021c1e-d96e-45ca-8c87-021921c69ca1/preset_teacher.json"
                      },
                      {
                        "id": "3dfe526a-f7e1-446c-b462-0105513cd532",
                        "name": "preset_student",
                        "description": "Preset for students",
                        "s3URL": "https://dyte-uploads.s3.ap-south-1.amazonaws.com/b0021c1e-d96e-45ca-8c87-021921c69ca1/preset_teacher.json"
                      }
                    ]
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/preset-role":
    summary: Add a role
    post:
      summary: Add a role
      description: |
        Add a role for the current organization
      tags:
        - Roles
      operationId: addRole
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePresetRoleRequestBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "role": {
                      "name": "hidden-student",
                      "description": "Hidden student",
                      "s3URL": "https://dyte-configs.s3.ap-south-1.amazonaws.com/4dd942ea-80d1-4cf8-ad34-9eb058f231fe/roles/preset_teacher.json",
                      "id": "ca95d742-3326-4807-80f8-a8b9c54cb38d"
                    },
                    "override": false
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/preset-roles":
    summary: Get all roles
    get:
      summary: Get all roles
      description: |
        Get all roles for the current organization
      tags:
        - Roles
      operationId: getRoles
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success": true,
                  "message": "",
                  "data": {
                    "total": 2,
                    "roles": [
                      {
                        "id": "6483d3be-ca80-4b95-b7fd-9cdc32188501",
                        "name": "host",
                        "s3URL": "https://dyte-configs.s3.ap-south-1.amazonaws.com/default/roles/host.json",
                        "description": "Default host role"
                      },
                      {
                        "id": "656597ee-c71a-4b52-9f8a-2f19faf85c47",
                        "name": "participant",
                        "s3URL": "https://dyte-configs.s3.ap-south-1.amazonaws.com/default/roles/participant.json",
                        "description": "Default participant role"
                      }
                    ]
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/meetings/{meetingId}/recording":
    summary: Start a recording for a meeting ID
    post:
      summary: Start a recording for a meeting ID
      description: |
        Start a recording for a given meeting using its ID
      tags:
        - Recording
      operationId: startRecording
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartRecordingRequestBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "data": {
                    "recording": {
                      "status": "INVOKED",
                      "downloadUrlExpiry": null,
                      "downloadUrl": null,
                      "startedTime": null,
                      "stoppedTime": null,
                      "id": "12352ba4-e41c-450e-a467-0ca3229225a3",
                      "outputFileName": "room_name_1612521000945.mp4"
                    }
                  },
                  "message": "Recording started",
                  "success": true
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/rooms/{roomName}/recording":
    summary: Start a recording with room name
    post:
      summary: Start a recording with room name
      description: |
        Start a recording for a given meeting using a room name
      tags:
        - Recording
      operationId: startRecordingWithRoomName
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: roomName
          in: path
          description: room name for the meeting
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartRecordingRequestBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "data": {
                    "recording": {
                      "status": "INVOKED",
                      "downloadUrlExpiry": null,
                      "downloadUrl": null,
                      "startedTime": null,
                      "stoppedTime": null,
                      "id": "12352ba4-e41c-450e-a467-0ca3229225a3",
                      "outputFileName": "room_name_1612521000945.mp4"
                    }
                  },
                  "message": "Recording started",
                  "success": true
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/meetings/{meetingId}/recordings":
    summary: Get all recordings
    get:
      summary: Get all recordings
      description: |
        Get all recordings for a given meeting
      tags:
        - Recording
      operationId: getAllRecordings
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "message": "",
                  "success": true,
                  "data": {
                    "total": 2,
                    "recordings": [
                      {
                        "id": "fbf69dd8-768f-4b1b-949f-0463dc96ed98",
                        "downloadUrlExpiry": "2021-01-21T21:23:34.480Z",
                        "downloadUrl": "https://dyte-recordings.s3.ap-south-1.amazonaws.com/some_url",
                        "status": "UPLOADED",
                        "startedTime": "2021-01-21T19:22:27.539Z",
                        "stoppedTime": "2021-01-21T19:23:34.490Z"
                      },
                      {
                        "id": "37ea3784-97e6-41f8-b4fa-efc7c0656294",
                        "downloadUrlExpiry": null,
                        "downloadUrl": null,
                        "status": "RECORDING",
                        "startedTime": "2021-01-21T19:33:07.283Z",
                        "stoppedTime": null
                      }
                    ]
                  }
                }
        "400":
          description: Invalid Org ID or Meeting ID supplied
      security:
        - api_key: []
  ? "/organizations/{organizationId}/meetings/{meetingId}/recordings/{recordingId}"
  : summary: Get/update a specific recording
    get:
      summary: Get recording
      description: |
        Get a recording for a given meeting
      tags:
        - Recording
      operationId: getRecording
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
        - name: recordingId
          in: path
          description: ID for the recording
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "message": "",
                  "success": true,
                  "data": {
                    "recording": {
                      "id": "fbf69dd8-768f-4b1b-949f-0463dc96ed98",
                      "downloadUrlExpiry": null,
                      "downloadUrl": null,
                      "status": "UPLOADING",
                      "startedTime": "2021-01-21T19:22:27.539Z",
                      "stoppedTime": "2021-01-21T19:23:34.490Z"
                    }
                  }
                }
        "400":
          description: Invalid Org ID or Meeting ID supplied
      security:
        - api_key: []
    put:
      summary: Update/Stop recording
      description: |
        Update/Stop a recording for a given meeting
      tags:
        - Recording
      operationId: updateRecording
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: meetingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
        - name: recordingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRecordingRequestBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "data": {
                    "recording": {
                      "id": "12352ba4-e41c-450e-a467-0ca3229225a3",
                      "downloadUrlExpiry": null,
                      "downloadUrl": null,
                      "status": "UPLOADING",
                      "startedTime": "2021-01-21T20:25:36.194Z",
                      "stoppedTime": "2021-01-21T20:27:23.180Z"
                    }
                  },
                  "message": "Recording stopped",
                  "success": true
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/rooms/{roomName}/recordings/{recordingId}":
    summary: Update a specific recording given a room name
    put:
      summary: Update/Stop recording
      description: |
        Update/Stop a recording for a given meeting using a room name
      tags:
        - Recording
      operationId: updateRecordingWithRoomName
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: roomName
          in: path
          description: room name for the meeting
          required: true
          schema:
            type: string
        - name: recordingId
          in: path
          description: ID for the meeting
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRecordingRequestBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "data": {
                    "recording": {
                      "id": "12352ba4-e41c-450e-a467-0ca3229225a3",
                      "downloadUrlExpiry": null,
                      "downloadUrl": null,
                      "status": "UPLOADING",
                      "startedTime": "2021-01-21T20:25:36.194Z",
                      "stoppedTime": "2021-01-21T20:27:23.180Z"
                    }
                  },
                  "message": "Recording stopped",
                  "success": true
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/rooms/{roomName}/active-recording":
    summary: Get active recordings for a room
    get:
      summary: Get all Get active recordings for a room
      description: |
        Get all Get active recordings for a room
      tags:
        - Recording
      operationId: getActiveRecording
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: roomName
          in: path
          description: room name of the meeting
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success":true,
                  "data":{
                    "recording":{
                        "status":"INVOKED",
                        "outputFileName":"aboard-saw_1620021373339.mp4",
                        "downloadUrlExpiry":null,
                        "roomUUID":null,
                        "downloadUrl":null,
                        "errMessage":null,
                        "startedTime":null,
                        "stoppedTime":null,
                        "id":"290e505d-75ed-406b-8792-fd97cad7dbaf"
                    }
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/webhook":
    summary: Add a webhook
    post:
      summary: Add a webhook
      description: |
        Add a webhook for the current organization
      tags:
        - Webhooks
      operationId: addWebHook
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequestBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success": true,
                  "data": {
                      "webhook": {
                        "id": "a3044f50-a805-457d-a237-b243d1381b1c",
                        "name": "myWebhook1",
                        "url": "https://myOrganization.com/webhook",
                        "events": [
                            "meeting.started",
                            "meeting.ended",
                            "meeting.participantJoined",
                            "meeting.participantLeft",
                            "recording.statusUpdate"
                        ],
                        "organizationId": "a784edbb-d96d-4fb0-98c7-8f5c8e4c6b9d"
                      }
                    }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/webhooks":
    summary: Get all webhooks
    get:
      summary: Get all webhooks
      description: |
        Get all webhooks for the current organization
      tags:
        - Webhooks
      operationId: getWebhooks
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success":true,
                  "data":{
                    "webhooks":[
                      {
                        "id":"a3044f50-a805-457d-a237-b243d1381b1c",
                        "name":"myWebhook1",
                        "url":"https://myOrganization.com/webhook",
                        "events":[
                          "meeting.started",
                          "meeting.ended",
                          "meeting.participantJoined",
                          "meeting.participantLeft",
                          "recording.statusUpdate"
                        ],
                        "organizationId":"a784edbb-d96d-4fb0-98c7-8f5c8e4c6b9d"
                      },
                      {
                        "id":"4ef7fb10-d76b-42fa-8158-60ae44f1cfe3",
                        "name":"myWebhook2",
                        "url":"https://myOrganization.com/webhook2",
                        "events":[
                          "meeting.started",
                          "meeting.ended",
                          "recording.statusUpdate"
                        ],
                        "organizationId":"a784edbb-d96d-4fb0-98c7-8f5c8e4c6b9d"
                      }
                    ]
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/webhooks/{webhookId}":
    summary: webhook
    get:
      summary: Get webhook
      description: |
        Get a webhook for the current organization
      tags:
        - Webhooks
      operationId: getWebhook
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: webhookId
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success":true,
                  "data":{
                    "webhook":{
                      "id":"a3044f50-a805-457d-a237-b243d1381b1c",
                      "name":"myWebhook1",
                      "url":"https://myOrganization.com/webhook",
                      "events":[
                        "meeting.started",
                        "meeting.ended",
                        "meeting.participantJoined",
                        "meeting.participantLeft",
                        "recording.statusUpdate"
                      ],
                      "organizationId":"a784edbb-d96d-4fb0-98c7-8f5c8e4c6b9d"
                    }
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
    put:
      summary: Update webhook
      description: |
        Update a webhook for the current organization
      tags:
        - Webhooks
      operationId: deleteWebhook
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: webhookId
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequestBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success":true,
                  "data":{
                    "webhook":{
                      "id":"a3044f50-a805-457d-a237-b243d1381b1c",
                      "name":"myWebhook1",
                      "url":"https://myOrganization.com/webhook",
                      "events":[
                        "meeting.started",
                        "meeting.ended",
                        "meeting.participantJoined",
                        "meeting.participantLeft",
                        "recording.statusUpdate"
                      ],
                      "organizationId":"a784edbb-d96d-4fb0-98c7-8f5c8e4c6b9d"
                    }
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
    delete:
      summary: Delete webhook
      description: |
        Delete the specific webhook for the current organization
      tags:
        - Webhooks
      operationId: updateWebhook
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: webhookId
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success":true,
                  "data":{
                    "webhook":{
                      "id":"a3044f50-a805-457d-a237-b243d1381b1c"
                    }
                  }
                }
        "400":
          description: Invalid Org ID supplied
      security:
        - api_key: []
  "/organizations/{organizationId}/webhooks/{webhookId}/logs":
    summary: webhook
    get:
      summary: Get all logs for requests sent out for a specific webhook
      description: |
        Get all logs for requests sent out for a specific webhook
      tags:
        - Webhooks
      operationId: getWebhookLogs
      parameters:
        - name: organizationId
          in: path
          description: ID of organization
          required: true
          schema:
            type: string
            format: uuid
        - name: webhookId
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
        - name: startTime
          in: query
          description: Get logs only after startTime
          required: true
          schema:
            type: number
            format: date-time
        - name: endTime
          in: query
          description: Get logs only before endTime
          required: true
          schema:
            type: number
            format: date-time
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
              example: |
                {
                  "success": true,
                  "logs": [
                      {
                          "webhookId": "1ed88ebb-01ee-41b7-9aca-e8fa4955c4fc",
                          "name": "nisi do labore reprehenderit",
                          "logId": "b251164d-7f05-42a2-a6b9-9338507ef98b",
                          "headers": {
                              "dyte-signature": "UlSKQ9/ISi3vcisrfqh1J+vwwoCPLKC0Pz/ecOD57y/vuaMEfY2CdbT9M8sXo1qCb0ySN5XF8NZbokbdX4JjcK8q3txRCfu286H9pwLmPJ29KvBJDZ9ERSPOCbWOx0mnH2bKKTSrtRrOptcR1f6sID+C5HTaP9J9AUj+Nf3HlN9v4qArFfC0UxxSHpodi64i4uD2mwkN4TvWeDAycJlRei4/O1pJz623afYNqMnKEwnDGpRQNoMQ9CNZS1ZB7WZ/QsemwBOvl3JxwjeTiW3za/SDQB5b7BP8aUlQEjVPCklxZB9hV7UQIW9xxGVu7yKwmgcORxoIv6bvCUJmLFEzxw=="
                          },
                          "payload": {
                              "event": "meeting.participantJoined",
                              "meeting": {
                                  "id": "5ba742c2-3530-4354-8db9-50c6084ff858",
                                  "title": "hello-kitty3",
                                  "status": "LIVE",
                                  "roomName": "sneaky-meteorology",
                                  "createdAt": "2021-04-14T15:55:00.859Z",
                                  "organizedBy": "Rishit"
                              },
                              "participant": {
                                  "peerId": "5c516751-e8a4-4f13-9866-1c75dae9d6f9",
                                  "userDisplayName": "asd"
                              },
                              "participants": [
                                  {
                                      "id": "ccba299d-984b-4d98-85de-b63d22e32e78",
                                      "name": "asdads",
                                      "email": "f65c0d16-bc71-434f-a8cf-10911308801b@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-04-14T15:56:57.863Z"
                                  },
                                  {
                                      "id": "420b185b-8c60-418b-b572-bc624f3e7a1d",
                                      "name": "Rishit Bansal",
                                      "email": "8c46c6e2-1998-4e97-ae5a-234c29cacdb3@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-04-14T15:55:49.550Z"
                                  },
                                  {
                                      "id": "8f3be8db-bcb0-4196-a11a-fa2c5cf2dff3",
                                      "name": "9a8d48e8-8a20-4263-a060-8c07838367ad",
                                      "email": "recorder@dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-04-14T15:57:05.639Z"
                                  },
                                  {
                                      "id": "f85f275b-b522-424a-90d4-ebffd52b4df9",
                                      "name": "asd",
                                      "email": "3ad0ae2b-aeaa-4239-88cc-f3e3854c95de@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-17T17:18:19.366Z"
                                  },
                                  {
                                      "id": "ee37e785-114d-4d8d-9279-ca23207ac7b7",
                                      "name": "Hello",
                                      "email": "client-1@Rishit.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-17T17:20:16.968Z"
                                  },
                                  {
                                      "id": "57ee9918-8958-450b-9b5b-41cf20f63607",
                                      "name": "asd",
                                      "email": "453b35d4-7660-46c8-8889-9e67f7aefba3@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-17T17:24:20.662Z"
                                  },
                                  {
                                      "id": "0b9d734f-4874-45c0-a31b-d4f877df43ef",
                                      "name": "Hello",
                                      "email": "client-2@Rishit.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-17T17:23:39.410Z"
                                  },
                                  {
                                      "id": "dc688a2d-2d83-495f-8558-43c349718c9a",
                                      "name": "Hello",
                                      "email": "client-3@Rishit.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-19T05:41:10.206Z"
                                  },
                                  {
                                      "id": "f09753f0-05b4-46ff-a163-8c31b43931cd",
                                      "name": "Hello",
                                      "email": "client-4@Rishit.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-19T05:43:19.988Z"
                                  },
                                  {
                                      "id": "ab68e32b-72da-4db6-a20b-09998aba6ff6",
                                      "name": "asdasd",
                                      "email": "9f4e4dde-77c6-4d7c-9a19-9a4b81e01ef6@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-19T05:44:46.342Z"
                                  },
                                  {
                                      "id": "f403ef02-b162-49ac-b141-b83fad8c3bde",
                                      "name": "asd",
                                      "email": "e52a830e-0483-4725-bd1a-c7f7d3450ead@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-19T05:45:21.364Z"
                                  }
                              ]
                          },
                          "timestamp": "2021-08-19T06:37:33.405Z",
                          "statusCode": 502
                      },
                      {
                          "webhookId": "1ed88ebb-01ee-41b7-9aca-e8fa4955c4fc",
                          "name": "nisi do labore reprehenderit",
                          "logId": "70e8afa6-248c-4ff8-a6d3-1259bc8158bf",
                          "headers": {
                              "dyte-signature": "ornHjWIdsJY7HCbZt7dG7bJv+pdp1NHwxLhZTFQl17j6xFvf7XJEgpiD9jXYrZQTcFdSiTTo/pbXlWoPEn3Z2gmOdf9vMSpN0BCnG+xC+mpnmrAjQJ2EitZndVxeKVk39JM+f0RZXUAl6mwPrmlPetT4PmUJ9B7Gha9sFYY/l7RMH/a8lPufdidkq2GW7gpyDMaB5t+NTKe9aT8WD0vEn9X6YmsHQDie28Su9d65F6b6w6HA1yFbMAUPGcAkzurUDn6Cp8eiPtOp7AsgDqmVv+9oQXUGZhdhaSIzgLyh6aRoYmF2T9l3h3yBu9K6skJPx5toXBdIoil/Lk9WdmTgig=="
                          },
                          "payload": {
                              "event": "meeting.participantLeft",
                              "meeting": {
                                  "id": "5ba742c2-3530-4354-8db9-50c6084ff858",
                                  "title": "hello-kitty3",
                                  "status": "LIVE",
                                  "roomName": "sneaky-meteorology",
                                  "createdAt": "2021-04-14T15:55:00.859Z",
                                  "organizedBy": "Rishit"
                              },
                              "participant": {
                                  "peerId": "5c516751-e8a4-4f13-9866-1c75dae9d6f9",
                                  "userDisplayName": "asd"
                              },
                              "participants": [
                                  {
                                      "id": "ccba299d-984b-4d98-85de-b63d22e32e78",
                                      "name": "asdads",
                                      "email": "f65c0d16-bc71-434f-a8cf-10911308801b@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-04-14T15:56:57.863Z"
                                  },
                                  {
                                      "id": "420b185b-8c60-418b-b572-bc624f3e7a1d",
                                      "name": "Rishit Bansal",
                                      "email": "8c46c6e2-1998-4e97-ae5a-234c29cacdb3@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-04-14T15:55:49.550Z"
                                  },
                                  {
                                      "id": "8f3be8db-bcb0-4196-a11a-fa2c5cf2dff3",
                                      "name": "9a8d48e8-8a20-4263-a060-8c07838367ad",
                                      "email": "recorder@dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-04-14T15:57:05.639Z"
                                  },
                                  {
                                      "id": "f85f275b-b522-424a-90d4-ebffd52b4df9",
                                      "name": "asd",
                                      "email": "3ad0ae2b-aeaa-4239-88cc-f3e3854c95de@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-17T17:18:19.366Z"
                                  },
                                  {
                                      "id": "ee37e785-114d-4d8d-9279-ca23207ac7b7",
                                      "name": "Hello",
                                      "email": "client-1@Rishit.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-17T17:20:16.968Z"
                                  },
                                  {
                                      "id": "57ee9918-8958-450b-9b5b-41cf20f63607",
                                      "name": "asd",
                                      "email": "453b35d4-7660-46c8-8889-9e67f7aefba3@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-17T17:24:20.662Z"
                                  },
                                  {
                                      "id": "0b9d734f-4874-45c0-a31b-d4f877df43ef",
                                      "name": "Hello",
                                      "email": "client-2@Rishit.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-17T17:23:39.410Z"
                                  },
                                  {
                                      "id": "dc688a2d-2d83-495f-8558-43c349718c9a",
                                      "name": "Hello",
                                      "email": "client-3@Rishit.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-19T05:41:10.206Z"
                                  },
                                  {
                                      "id": "f09753f0-05b4-46ff-a163-8c31b43931cd",
                                      "name": "Hello",
                                      "email": "client-4@Rishit.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-19T05:43:19.988Z"
                                  },
                                  {
                                      "id": "ab68e32b-72da-4db6-a20b-09998aba6ff6",
                                      "name": "asdasd",
                                      "email": "9f4e4dde-77c6-4d7c-9a19-9a4b81e01ef6@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-19T05:44:46.342Z"
                                  },
                                  {
                                      "id": "f403ef02-b162-49ac-b141-b83fad8c3bde",
                                      "name": "asd",
                                      "email": "e52a830e-0483-4725-bd1a-c7f7d3450ead@anon.dyte.in",
                                      "picture": null,
                                      "createdAt": "2021-08-19T05:45:21.364Z"
                                  }
                              ]
                          },
                          "timestamp": "2021-08-19T06:44:51.774Z",
                          "statusCode": 200
                      }
                  ]
                }
      security:
        - api_key: []
components:
  schemas:
    AddParticipantBody:
      type: object
      required:
        - clientSpecificId
      properties:
        clientSpecificId:
          type: string
        userDetails:
          type: object
          properties:
            name:
              type: string
            picture:
              type: string
              format: url
        presetName:
          type: string
        roleName:
          type: string
    CreateMeetingRequestBody:
      type: object
      properties:
        title:
          type: string
        presetName:
          type: string
          description: Preset to be used for all participants of this meeting
        recordOnStart:
          type: boolean
          description: Start recording the meeting as soon as the meeting starts. False by default.
        authorization:
          type: object
          properties:
            waitingRoom:
              type: boolean
              description: Host can accept/reject the participants joining the meeting. False by default.
            closed:
              type: boolean
              description: Invite only meeting. Requires a valid auth token to join the meeting. False by default.
    CreatePresetRequestBody:
      type: object
      required:
        - name
        - preset
      properties:
        name:
          type: string
        description:
          type: string
        preset:
          type: object
    CreatePresetRoleRequestBody:
      type: object
      required:
        - name
        - role
      properties:
        name:
          type: string
        description:
          type: string
        role:
          type: object
    UpdateMeetingRequestBody:
      type: object
      properties:
        title:
          type: string
        presetName:
          type: string
        status:
          type: string
          enum:
              - LIVE
              - CLOSED
    StartRecordingRequestBody:
      type: object
      properties:
        storageConfig:
          type: object
          required:
            - type
            - accessKey
            - secret
            - bucket
            - region
          properties:
            type:
              type: string
              enum:
                - aws
                - digitalocean
            accessKey:
              type: string
            secret:
              type: string
            region:
              type: string
            bucket:
              type: string
            path:
              type: string
        videoConfig:
          type: object
          properties:
            codec:
              type: string
              enum:
                - H264
                - VP8
                - VP9
        liveStreamingConfig:
          type: object
          description: >-
            Object containing configuration regarding livestreaming the meeting
            video to a platform that supports RTMP input. Note that livestreaming
            is only supported if the codec for the recording is H.264.
          properties:
            rtmpUrl:
              type: string
              format: url
    UpdateRecordingRequestBody:
      type: object
      required:
        - recordingAction
      properties:
        recordingAction:
          type: string
          enum:
            - stop
    WebhookRequestBody:
      type: object
      required:
        - name
        - url
        - events
      properties:
        name:
          type: string
        url:
          type: string
          format: url
        events:
          type: array
          items:
            type: string
            enum:
              - meeting.started
              - meeting.ended
              - meeting.participantJoined
              - meeting.participantLeft
              - recording.statusUpdate
    AddOrgUserBody:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - Owner
    APIResponse:
      type: object
      properties:
        succces:
          type: boolean
        message:
          type: string
        data:
          type: object
    GetStatsResponseSchema:
      type: object
      properties:
        succces:
          type: boolean
        totalMinutes:
          type: integer
        totalSessions:
          type: integer
        totalRecordingMinutes:
          type: integer
        dayStats:
          type: array
          items:
            type: object
            properties:
              totalMinutes:
                type: integer
              totalSessions:
                type: integer
              totalRecordingMinutes:
                type: integer
              day:
                type: string
                format: date-time
    RecordingStatsSchema:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
      type: object
      properties:
        data:
          type: object
          properties:
            total:
              type: integer
            recordingStats:
              type: array
              items:
                type: object
                properties:
                  startedTime:
                    type: string
                    format: date-time
                    nullable: true
                  stoppedTime:
                    type: string
                    format: date-time
                    nullable: true
                  roomName:
                    type: string
                  status:
                    type: string
                    enum:
                      - INVOKED
                      - RECORDING
                      - UPLOADING
                      - UPLOADED
                      - ERRORED
    RoomStatsBody:
      type: array
      items:
        type: object
        properties:
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          minutesConsumed:
            type: integer
          id:
            type: string
            format: uuid
          roomUUID:
            type: string
            format: uuid
          roomURL:
            type: string
          roomDisplayTitle:
            type: string
          maxUsers:
            type: integer
          currentUsers:
            type: integer
          createdBy:
            type: string
    OrgRoomsResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
      type: object
      properties:
        data:
          type: object
          properties:
            total:
              type: integer
            rooms:
              $ref: "#/components/schemas/RoomStatsBody"
    OrgMeetingRoomsResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
      type: object
      properties:
        data:
          type: object
          properties:
            rooms:
              $ref: "#/components/schemas/RoomStatsBody"
    GetUsersResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
      type: object
      properties:
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/OrgUser"
    GetMeetingsResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
      type: object
      properties:
        data:
          type: object
          properties:
            meetings:
              type: array
              items:
                $ref: "#/components/schemas/Meeting"
    GetMeetingResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
      type: object
      properties:
        data:
          type: object
          properties:
            meeting:
              $ref: "#/components/schemas/Meeting"
    CreateMeetingResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
      type: object
      properties:
        data:
          type: object
          properties:
            meeting:
              $ref: "#/components/schemas/Meeting"
    AddParticipantResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
      type: object
      properties:
        data:
          type: object
          properties:
            authResponse:
              $ref: "#/components/schemas/AuthResponse"
    GetParticipantsResponse:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
      type: object
      properties:
        data:
          type: object
          properties:
            participants:
              type: array
              items:
                $ref: "#/components/schemas/Participant"
    OrgUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        role:
          type: string
          enum:
            - Owner
            - Client
            - Member
    Participant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        picture:
          type: string
          format: url
        createdAt:
          type: string
          format: date-time
    AuthResponse:
      type: object
      properties:
        userAdded:
          type: boolean
        id:
          type: string
        authToken:
          type: string
    Meeting:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        roomName:
          type: string
        status:
          type: string
          enum:
            - LIVE
            - CREATED
        createdAt:
          type: string
          format: date-time
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
